{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7201b71",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "\n",
    "st.title(\"Tiêu đề\")\n",
    "st.write(\"Đây là ứng dụng Streamlit đơn giản\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a35eba7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "df = sns.load_dataset()\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "sns.scatterplot(data=df, x=\"total_bill\", y=\"tip\", ax=ax)\n",
    "st.pyplot(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e013e305",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "function_name = \"sin(x)\"\n",
    "\n",
    "\n",
    "def func_sin(x):\n",
    "    return np.sin(x)\n",
    "\n",
    "\n",
    "x = np.linspace(-10, 10, 400)\n",
    "y = func_sin(x)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(x, y, label=function_name)\n",
    "plt.title(f\"Đồ thị hàm số y = {function_name} trên đoạn [-10, 10]\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "plt.grid(True)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4822ba16",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "st.title(\"Biểu diễn đồ thị hàm số cơ bản trên Streamlit\")\n",
    "\n",
    "# Chọn hàm số từ selectbox\n",
    "function_choice = st.selectbox(\"Chọn hàm số:\", [\"sin(x)\", \"cos(x)\", \"exp(x)\", \"log(x)\"])\n",
    "\n",
    "# Định nghĩa đoạn vẽ\n",
    "start = st.sidebar.slider(\"Điểm bắt đầu:\", -15.0, 5.0, -10.0)\n",
    "end = st.sidebar.slider(\"Điểm kết thúc:\", -5.0, 15.0, 10.0)\n",
    "num_points = st.sidebar.slider(\"Số lượng điểm:\", 100, 1000, 400)\n",
    "\n",
    "# Tạo mảng các giá trị x\n",
    "x = np.linspace(start, end, num_points)\n",
    "y = None\n",
    "function_name = \"\"\n",
    "\n",
    "# Tính các giá trị y tương ứng dựa trên lựa chọn\n",
    "if function_choice == \"sin(x)\":\n",
    "    y = np.sin(x)\n",
    "    function_name = \"sin(x)\"\n",
    "elif function_choice == \"cos(x)\":\n",
    "    y = np.cos(x)\n",
    "    function_name = \"cos(x)\"\n",
    "elif function_choice == \"exp(x)\":\n",
    "    y = np.exp(x)\n",
    "    function_name = \"exp(x)\"\n",
    "elif function_choice == \"log(x)\":\n",
    "    # Tránh lỗi log(x) cho x <= 0 bằng cách chỉ vẽ phần x > 0\n",
    "    positive_x_mask = x > 0\n",
    "    positive_x = x[positive_x_mask]\n",
    "    y_positive = np.log(positive_x)\n",
    "    # Để vẽ trên cùng một đồ thị, chúng ta có thể thêm NaN cho phần x <= 0\n",
    "    y = np.full_like(x, np.nan)\n",
    "    y[positive_x_mask] = y_positive\n",
    "    function_name = \"log(x)\"\n",
    "\n",
    "# Vẽ đồ thị bằng Matplotlib\n",
    "fig, ax = plt.subplots(figsize=(10, 6))\n",
    "ax.plot(x, y, label=function_name)\n",
    "ax.set_title(f\"Đồ thị hàm số y = {function_name} trên đoạn [{start}, {end}]\")\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"y\")\n",
    "ax.grid(True)\n",
    "ax.legend()\n",
    "\n",
    "# Hiển thị đồ thị trong Streamlit\n",
    "st.pyplot(fig)\n",
    "\n",
    "st.sidebar.markdown(\"---\")\n",
    "st.sidebar.markdown(\"### Điều chỉnh đồ thị\")\n",
    "st.sidebar.markdown(\n",
    "    \"Sử dụng các thanh trượt bên trái để thay đổi đoạn vẽ và số lượng điểm.\"\n",
    ")\n",
    "st.sidebar.markdown(\"Chọn hàm số bạn muốn xem từ menu thả xuống ở trên.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd6aaf6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "\n",
    "st.title(\"Ứng dụng đếm số lần nhấn nút\")\n",
    "\n",
    "# Khởi tạo biến đếm trong session state nếu nó chưa tồn tại\n",
    "if \"count\" not in st.session_state:\n",
    "    st.session_state[\"count\"] = 0\n",
    "\n",
    "# Hiển thị số lần nhấn hiện tại\n",
    "st.write(f\"Số lần nhấn nút: {st.session_state['count']}\")\n",
    "\n",
    "\n",
    "# Hàm được gọi khi nút được nhấn\n",
    "def increment_counter():\n",
    "    st.session_state[\"count\"] += 1\n",
    "\n",
    "\n",
    "# Tạo một nút. Khi nút được nhấn, hàm increment_counter sẽ được gọi\n",
    "st.button(\"Nhấn vào đây để tăng\", on_click=increment_counter)\n",
    "\n",
    "st.subheader(\"Ví dụ với input text\")\n",
    "\n",
    "# Khởi tạo biến lưu trữ tên trong session state\n",
    "if \"name\" not in st.session_state:\n",
    "    st.session_state[\"name\"] = \"\"\n",
    "\n",
    "\n",
    "# Hàm được gọi khi nút \"Gửi\" được nhấn\n",
    "def update_name():\n",
    "    st.session_state[\"name\"] = st.session_state[\"name_input\"]\n",
    "\n",
    "\n",
    "# Tạo một input text và liên kết giá trị của nó với session state bằng key \"name_input\"\n",
    "st.text_input(\"Nhập tên của bạn:\", key=\"name_input\")\n",
    "\n",
    "# Tạo một nút \"Gửi\" để cập nhật tên trong session state\n",
    "st.button(\"Gửi\", on_click=update_name)\n",
    "\n",
    "# Hiển thị tên đã nhập (giá trị này sẽ được giữ lại sau khi nút \"Gửi\" được nhấn)\n",
    "st.write(f\"Tên bạn đã nhập: {st.session_state['name']}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
